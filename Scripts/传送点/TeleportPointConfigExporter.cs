using MiGame.Config;
using System;
using System.Collections.Generic;
using UnityEditor;
using System.Linq;
using System.Text;
using System.IO;
using System.Reflection;

namespace MiGame.Editor.Exporter
{
    public class TeleportPointConfigExporter : ConfigExporter<TeleportPointConfig>
    {
        // 字段名映射：中文字段名 -> 中文显示名（保持一致性）
        private static readonly Dictionary<string, string> FieldNameMapping = new Dictionary<string, string>
        {
            {"传送点名称", "传送点名称"},
            {"传送节点", "传送节点"},
            {"需求等级", "需求等级"},
            {"图片资源路径", "图片资源路径"},
            {"传送点描述", "传送点描述"},
            {"是否解锁", "是否解锁"},
            {"传送消耗", "传送消耗"}
        };

        public override string GetAssetPath()
        {
            return "Assets/GameConf/传送点";
        }

        public override void Export(string exportDir)
        {
            var allConfigs = new List<TeleportPointConfig>();
            allConfigs.AddRange(FindAssetsInPath("Assets/GameConf/传送点"));

            if (allConfigs == null || allConfigs.Count == 0) return;

            var configName = GetType().Name.Replace("Exporter", "");
            var sb = new StringBuilder();

            sb.AppendLine($"-- {configName}.lua");
            sb.AppendLine("-- Generated by ConfigExporter. Any custom code will be overwritten.");
            sb.AppendLine();
            sb.AppendLine($"---@class {configName}");
            sb.AppendLine("---@field Data table<string, table>");
            sb.AppendLine();
            sb.AppendLine($"---@type {configName}");
            sb.AppendLine($"local {configName} = {{Data = {{}}}}");
            sb.AppendLine();
            sb.AppendLine("-- --- AUTO GENERATED CONFIG BEGIN ---");
            sb.AppendLine($"{configName}.Data = {{");

            foreach (var config in allConfigs)
            {
                if (config == null) continue;
                
                // 自动同步：如果传送点名称为空，则使用文件名
                if (string.IsNullOrEmpty(config.传送点名称))
                {
                    config.传送点名称 = config.name;
                    EditorUtility.SetDirty(config); // 标记为已修改
                }
                
                // 使用ScriptableObject的name属性（文件名）作为键
                string key = config.name;
                sb.AppendLine($"    ['{key}'] = {{");
                ObjectToLuaWithChineseNames(config, sb, 3);
                sb.AppendLine("    },");
            }

            // 保存所有修改的配置
            AssetDatabase.SaveAssets();
            AssetDatabase.Refresh();

            sb.AppendLine("}");
            sb.AppendLine("-- --- AUTO GENERATED CONFIG END ---");
            sb.AppendLine();
            sb.AppendLine($"return {configName}");

            var outputPath = Path.Combine(exportDir, configName + ".lua");
            File.WriteAllText(outputPath, sb.ToString(), Encoding.UTF8);
            UnityEngine.Debug.Log($"导出 {typeof(TeleportPointConfig).Name} 配置到: {outputPath}");
        }

        private void ObjectToLuaWithChineseNames(object obj, StringBuilder sb, int indentLevel)
        {
            if (obj == null) return;

            var fields = obj.GetType().GetFields(BindingFlags.Public | BindingFlags.Instance);
            var indent = new string(' ', indentLevel * 2);

            foreach (var field in fields)
            {
                if (Attribute.IsDefined(field, typeof(NonSerializedAttribute)) ||
                    Attribute.IsDefined(field, typeof(ObsoleteAttribute)))
                {
                    continue;
                }

                // 获取中文字段名，如果没有映射则使用字段名本身
                string displayName = FieldNameMapping.ContainsKey(field.Name) ? FieldNameMapping[field.Name] : field.Name;
                
                sb.Append($"{indent}['{displayName}'] = ");
                ValueToLua(field.GetValue(obj), sb, indentLevel, field.Name);
                sb.AppendLine(",");
            }
        }

        private List<TeleportPointConfig> FindAssetsInPath(string path)
        {
            string[] guids = AssetDatabase.FindAssets($"t:TeleportPointConfig", new[] { path });
            return guids
                .Select(guid => AssetDatabase.GUIDToAssetPath(guid))
                .Select(assetPath => AssetDatabase.LoadAssetAtPath<TeleportPointConfig>(assetPath))
                .Where(asset => asset != null)
                .ToList();
        }
    }
}
