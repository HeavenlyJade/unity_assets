using MiGame.Achievement;
using System.Collections.Generic;
using UnityEditor;
using System.Linq;

namespace MiGame.Editor.Exporter
{
    public class AchievementConfigExporter : ConfigExporter<AchievementConfig>
    {
        public override string GetAssetPath()
        {
            return "Assets/GameConf/成就";
        }

        public override void Export(string exportDir)
        {
            var allConfigs = new List<AchievementConfig>();
            allConfigs.AddRange(FindAssetsInPath("Assets/GameConf/成就"));
            allConfigs.AddRange(FindAssetsInPath("Assets/GameConf/成就天赋")); // 递归检索成就天赋目录

            if (allConfigs == null || allConfigs.Count == 0) return;

            var configName = GetType().Name.Replace("Exporter", "");
            var sb = new System.Text.StringBuilder();

            sb.AppendLine($"-- {configName}.lua");
            sb.AppendLine("-- Generated by ConfigExporter. Any custom code will be overwritten.");
            sb.AppendLine();
            sb.AppendLine($"---@class {configName}");
            sb.AppendLine("---@field Data table<string, table>");
            sb.AppendLine();
            sb.AppendLine($"---@type {configName}");
            sb.AppendLine($"local {configName} = {{Data = {{}}}}");
            sb.AppendLine();
            sb.AppendLine("-- --- AUTO GENERATED CONFIG BEGIN ---");
            sb.AppendLine($"{configName}.Data = {{");

            foreach (var config in allConfigs)
            {
                if (config == null) continue;
                sb.AppendLine($"    ['{config.name}'] = {{");
                ObjectToLua(config, sb, 3);
                sb.AppendLine("    },");
            }

            sb.AppendLine("}");
            sb.AppendLine("-- --- AUTO GENERATED CONFIG END ---");
            sb.AppendLine();
            sb.AppendLine($"return {configName}");

            var outputPath = System.IO.Path.Combine(exportDir, configName + ".lua");
            System.IO.File.WriteAllText(outputPath, sb.ToString(), System.Text.Encoding.UTF8);
            UnityEngine.Debug.Log($"导出 {typeof(AchievementConfig).Name} 配置到: {outputPath}");
        }

        private List<AchievementConfig> FindAssetsInPath(string path)
        {
            string[] guids = AssetDatabase.FindAssets($"t:AchievementConfig", new[] { path });
            return guids
                .Select(guid => AssetDatabase.GUIDToAssetPath(guid))
                .Select(assetPath => AssetDatabase.LoadAssetAtPath<AchievementConfig>(assetPath))
                .Where(asset => asset != null)
                .ToList();
        }
    }
} 